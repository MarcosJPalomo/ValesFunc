@using VoucherCapture.ViewModel
@model List<VoucherDetail_ViewModel>

@*     @foreach (var item in Model)
{ *@
<div class="row align-middle">  
    <div class="col">
        <div class="row">
            <div class="col-auto d-flex">
                <label class="form-label">Concepto: </label>
            </div>
            <div class="col">
                <input class="form-control" type="text" list="concepts" id="txtConcept" />
                <datalist id="concepts"></datalist>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="row">
            <div class="col-auto d-flex"><label class="form-label">Comentario: </label></div>
            <div class="col"><textarea class="form-control" id="txtComment" placeholder="Opcional">Folio:@ViewBag.VoucherNumber </textarea></div>
        </div>
    </div>
</div>
@* } *@
<br />
<table class="table table-secondary table-sm table-bordered table-hover table-striped text-center align-middle">
    <thead>
        <tr>
            <th rowspan="2" width="10%">Insumo</th>
            <th rowspan="2" width="40%">Descripción</th>
            <th rowspan="2" width="6%">Cantidad Solicitada</th>
            <th colspan="6" width="39%">Almacén</th>
            <th rowspan="2" width="5%">T. U.</th>
        </tr>
        <tr>
            <th colspan="2">Gral</th>
            <th colspan="2">Imp</th> 
           <th colspan="2">M.P</th>

            @{
                List<string> nombres = new List<string>();
            }
            @foreach (var item in Model)
            {                
                @foreach (var storage in item.Storages)
                {                   
                    @if (storage.QtyTotal > 0)                  
                    {
                        @if (!nombres.Contains(@storage.Name.Substring(8)))
                        {
                            @if ((storage.IdStorage != 19) && (storage.IdStorage != 172357) && (storage.IdStorage != 172356))
                            {
                                nombres.Add(@storage.Name.Substring(8));
                                <th colspan="2">@storage.Name.Substring(8)</th>
                            }
                        }
                    }
                }
            }
        </tr>
    </thead>
    <tbody>
        @{
            List<string> nombresAl = new List<string>();
        }
        @foreach (var item in Model)
        {
            <tr name="supplies" data-id="@item.IdVoucherDetail" data-qtyReq="@item.QtyRequested">
                <td>@item.MicrosipKey</td>
                <td>@item.Supply</td>
                <td>@item.QtyRequested</td>
                @foreach (var storage in item.Storages)
                {
                    string dis = storage.QtyTotal == 0 ? "disabled" : "";
                    @if (storage.IdStorage == 19 || storage.IdStorage == 172357 || storage.IdStorage == 172356)
                    {
                        <td>
                            <input class="form-control" type="number" name="txtQtyAS" step="0.001" data-storage="@storage.IdStorage" data-qtyTotal="@storage.QtyTotal" @dis />
                        </td>
                        <td>
                            @storage.QtyTotal
                        </td>
                    }
                    else
                    {
                        @if (storage.QtyTotal > 0)
                        {
                            nombresAl.Add(@storage.Name.Substring(8));
                            <td>
                                <input class="form-control" type="number" name="txtQtyAS" step="0.001" data-storage="@storage.IdStorage" data-qtyTotal="@storage.QtyTotal" @dis />
                            </td>
                            <td>
                                @storage.QtyTotal
                            </td>
                        }
                        else
                        {
                            @if (!nombresAl.Contains(@storage.Name.Substring(8)))
                            {
                                <td hidden>
                                    <input class="form-control" type="number" name="txtQtyAS" step="0.001" data-storage="@storage.IdStorage" data-qtyTotal="@storage.QtyTotal" @dis />
                                </td>
                                <td hidden>
                                    @storage.QtyTotal
                                </td>
                            }
                            else
                            {
                                <td>
                                    <input class="form-control" type="number" name="txtQtyAS" step="0.001" data-storage="@storage.IdStorage" data-qtyTotal="@storage.QtyTotal" @dis />
                                </td>
                                <td>
                                    @storage.QtyTotal
                                </td>
                            }                           
                        }
                    }
                }
                <td>@item.UnitType</td>
            </tr>
        }
    </tbody>
</table>
<br />
<div class="d-grid gap-2 d-md-flex justify-content-md-end">
    <button type="button" class="btn btn-danger" style="margin-right:auto;" onclick="Authorize(3)"><i class="bi bi-x-lg"></i> Rechazar</button>
    <button type="button" class="btn btn-success" onclick="Authorize(1)"><i class="bi bi-check2"></i> Aceptar</button>
</div>

<script>
    GetConcepts();

    function GetConcepts() {
        $.ajax({
            url: '/Storage/ListConcepts',
            method: "GET",
            success: function (result) {
                $("#concepts").empty();
                var s = '';
                for (var i = 0; i < result.length; i++) {
                    s += '<option data-id="' + result[i].idConcept + '" value="' + result[i].description + '"></option>';
                }
                $("#concepts").append(s);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Status: " + textStatus); alert("Error: " + errorThrown);
                console.log(error);
            }
        });
    }

    function Authorize(status) {
        var msg = 'rechazar';
        if (status == 1) {
            msg = 'aprobar';
        }
        var result = confirm("¿Realmente quiere " + msg + " esta solicitud?");
        if (result) {
            var rowsTbl = document.getElementsByName('supplies');
            var data = [];
            var hasError = false;
            for (var i = 0; i < rowsTbl.length; i++) {
                var inputs = rowsTbl[i].querySelectorAll('input[name="txtQtyAS"]');
                var rowData = {
                    idVoucherDetail: rowsTbl[i].getAttribute('data-id'),
                    storages: []
                };
                var sum = 0;
                var qtyReq = parseFloat(rowsTbl[i].getAttribute('data-qtyReq'));
                for (var j = 0; j < inputs.length; j++) {
                    if (parseFloat(inputs[j].value) < 0) {
                        hasError = true;
                        alert('Se debe de aceptar una cantidad mayor o igual a 0.');
                        inputs[j].focus();
                        break;
                    }
                    var qtyTotal = inputs[j].getAttribute('data-qtyTotal');
                    if (parseFloat(inputs[j].value) > parseFloat(qtyTotal)) {
                        hasError = true;
                        alert('No se puede aceptar una cantidad mayor a la existente.');
                        inputs[j].focus();
                        break;
                    }
                    var inputValue = inputs[j].value;
                    if(inputValue.length == 0){
                        inputValue = 0;
                    }
                    rowData.storages.push({
                        qtyTotal: parseFloat(inputValue),
                        idStorage: inputs[j].getAttribute('data-storage')
                    });
                    sum += parseFloat(inputValue);
                }
                if (sum <= qtyReq) {
                    data.push(rowData);
                } else {
                    hasError = true;
                    alert('No se puede aceptar una cantidad mayor a la requerida. Fila: ' + (i + 1));
                    break;
                }
            }
            if (!hasError) {
                var comment = $('#txtComment').val();
                var inputElement = document.getElementById('txtConcept');
                var datalistElement = document.getElementById('concepts');
                var selectedValue = inputElement.value;
                var selectedOption = Array.from(datalistElement.options).find(option => option.value === selectedValue);
                if (!selectedOption) {
                    inputElement.value = null;
                    alert('Se tiene que seleccionar un concepto.');
                } else {
                    var idConcept = selectedOption.getAttribute('data-id');
                    $.ajax({
                        url: '/Authorize',
                        method: "post",
                        data: { status: status, idVoucher: @ViewBag.IdVoucher, lsvVDM: data, comment: comment, idConcept: idConcept },
                        success: function (data) {
                            window.location.href = data.redirectUrl;
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            console.log("Status: " + textStatus);
                            console.log("Error: " + errorThrown);
                        }
                    });
                }
            }
        }
    }
</script>